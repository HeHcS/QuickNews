'use client';

import { useEffect, useRef, useState } from 'react';
import { useInView } from 'react-intersection-observer';
import TopNav from './TopNav';
import BottomNav from './BottomNav';
import Comments from './Comments';
import { usePathname, useRouter, useSearchParams } from 'next/navigation';
import ArticlePopup from './ArticlePopup';
import Link from 'next/link';
import { Heart, MessageCircle, Share2, Play } from 'lucide-react';

interface Video {
  id: string;
  videoFile: string;  // This will be the full URL from the database
  title: string;
  creator: {
    name: string;
    avatar?: string;
  };
  likes: number;
  comments: number;
  headline?: {
    text: string;
    source: string;
    timestamp: string;
  };
  captions?: {
    title: string;
    text: string;
  };
}

interface VideoPostProps {
  video: Video;
  isActive: boolean;
  isCommentsOpen: boolean;
  onCommentsOpenChange: (isOpen: boolean) => void;
  isArticleOpen: boolean;
  onArticleOpenChange: (isOpen: boolean) => void;
}

interface VideoFeedProps {
  page?: number;
  limit?: number;
}

// Sample videos data
const sampleVideos: { [key: string]: Video[] } = {
  Breaking: [
    {
      id: 'breaking-1',
      videoFile: '/VidAssets/bbcnewsvideo1.mp4',
      title: 'Breaking: Latest News Update üì∞',
      creator: {
        name: 'BBC News',
        avatar: 'https://picsum.photos/seed/bbc1/100/100',
      },
      likes: 1234,
      comments: 89
    }
  ],
  Following: [
    {
      id: 'following-1',
      videoFile: '/VidAssets/dylanpagevideo1.mp4',
      title: 'From Your Favorite Creator üåü',
      creator: {
        name: 'Dylan Page',
        avatar: 'https://picsum.photos/seed/dylan1/100/100',
      },
      likes: 2345,
      comments: 156
    }
  ],
  'For You': [
    {
      id: 'foryou-1',
      videoFile: '/VidAssets/dailymailvideo1.mp4',
      title: 'Daily Mail Latest üì∞',
      creator: {
        name: 'Daily Mail',
        avatar: 'https://picsum.photos/seed/dailymail1/100/100',
      },
      likes: 1234,
      comments: 89
    },
    {
      id: 'foryou-2',
      videoFile: '/VidAssets/dylanpagevideo2.mp4',
      title: 'Dylan Page Latest üé¨',
      creator: {
        name: 'Dylan Page',
        avatar: 'https://picsum.photos/seed/dylan2/100/100',
      },
      likes: 2345,
      comments: 156
    },
    {
      id: 'foryou-3',
      videoFile: '/VidAssets/dailymailvideo2.mp4',
      title: 'Daily Mail Update üìΩÔ∏è',
      creator: {
        name: 'Daily Mail',
        avatar: 'https://picsum.photos/seed/dailymail2/100/100',
      },
      likes: 3456,
      comments: 234
    }
  ],
  Politics: [
    {
      id: 'politics-1',
      videoFile: '/VidAssets/bbcnewsvideo1.mp4',
      title: 'Latest Political Update üèõÔ∏è',
      creator: {
        name: 'BBC News',
        avatar: 'https://picsum.photos/seed/bbc2/100/100',
      },
      likes: 3456,
      comments: 234
    }
  ],
  Tech: [
    {
      id: 'tech-1',
      videoFile: '/VidAssets/dylanpagevideo1.mp4',
      title: 'Latest Tech Innovation üíª',
      creator: {
        name: 'Dylan Page',
        avatar: 'https://picsum.photos/seed/dylan3/100/100',
      },
      likes: 5678,
      comments: 342
    }
  ],
  Business: [
    {
      id: 'business-1',
      videoFile: '/VidAssets/dailymailvideo2.mp4',
      title: 'Business Insights üìà',
      creator: {
        name: 'Daily Mail',
        avatar: 'https://picsum.photos/seed/dailymail3/100/100',
      },
      likes: 4567,
      comments: 278
    }
  ]
};

// Sample comments data
const sampleComments: { [key: string]: Array<{
  id: string;
  user: { name: string; avatar: string };
  text: string;
  likes: number;
  timestamp: string;
}> } = {
  'foryou-1': [
    {
      id: '1',
      user: {
        name: 'Alice Chen',
        avatar: 'https://picsum.photos/seed/alice/100/100',
      },
      text: 'This is amazing! The cinematography is on another level üî• Been waiting for content like this!',
      likes: 842,
      timestamp: '2h ago',
    },
    {
      id: '2',
      user: {
        name: 'Bob Smith',
        avatar: 'https://picsum.photos/seed/bob/100/100',
      },
      text: 'The lighting in this shot is perfect üëè What camera setup did you use?',
      likes: 324,
      timestamp: '1h ago',
    }
  ],
  'foryou-2': [
    {
      id: '1',
      user: {
        name: 'Michael Brown',
        avatar: 'https://picsum.photos/seed/michael/100/100',
      },
      text: 'First time seeing your content and I\'m already hooked! üé¨ Instant follow!',
      likes: 423,
      timestamp: '1h ago',
    },
    {
      id: '2',
      user: {
        name: 'Sophie Taylor',
        avatar: 'https://picsum.photos/seed/sophie/100/100',
      },
      text: 'The way you transition between scenes is so smooth ‚ú® Need a tutorial on this!',
      likes: 267,
      timestamp: '45m ago',
    }
  ],
  'foryou-3': [
    {
      id: '1',
      user: {
        name: 'Emma Watson',
        avatar: 'https://picsum.photos/seed/emma/100/100',
      },
      text: '0:45 is literally the best part! Had to watch it multiple times üòç',
      likes: 567,
      timestamp: '45m ago',
    },
    {
      id: '2',
      user: {
        name: 'David Kim',
        avatar: 'https://picsum.photos/seed/david/100/100',
      },
      text: 'Been following your work for months, and you keep getting better! Any tips for aspiring creators?',
      likes: 231,
      timestamp: '20m ago',
    }
  ],
  'breaking-1': [
    {
      id: '1',
      user: {
        name: 'Sarah Johnson',
        avatar: 'https://picsum.photos/seed/sarah/100/100',
      },
      text: 'üéµ Does anyone know the background music? It\'s so good!',
      likes: 142,
      timestamp: '5m ago',
    }
  ],
  'following-1': [
    {
      id: '1',
      user: {
        name: 'James Wilson',
        avatar: 'https://picsum.photos/seed/james/100/100',
      },
      text: 'This gives me such nostalgic vibes üåü Reminds me of old school cinematography but with a modern twist',
      likes: 189,
      timestamp: '30m ago',
    }
  ],
  'politics-1': [
    {
      id: '1',
      user: {
        name: 'Michael Brown',
        avatar: 'https://picsum.photos/seed/michael/100/100',
      },
      text: 'First time seeing your content and I\'m already hooked! üé¨ Instant follow!',
      likes: 423,
      timestamp: '1h ago',
    }
  ],
  'tech-1': [
    {
      id: '1',
      user: {
        name: 'Sophie Taylor',
        avatar: 'https://picsum.photos/seed/sophie/100/100',
      },
      text: 'The future of tech is looking bright! üöÄ',
      likes: 345,
      timestamp: '2h ago',
    }
  ],
  'business-1': [
    {
      id: '1',
      user: {
        name: 'James Wilson',
        avatar: 'https://picsum.photos/seed/james/100/100',
      },
      text: 'Great insights on market trends! üìà',
      likes: 278,
      timestamp: '1h ago',
    }
  ],
  // Add more comments for other videos...
};

const generateVideoContent = (videoFile: string | undefined) => {
  if (!videoFile) {
    return {
      title: 'Content Unavailable',
      text: 'This content is currently unavailable.'
    };
  }

  const filename = videoFile.split('/').pop()?.replace('.mp4', '') || '';
  
  // Define content templates based on video source
  const contentTemplates: { [key: string]: { title: string; text: string } } = {
    'bbcnewsvideo1': {
      title: 'Breaking: Major Climate Agreement Reached',
      text: 'World leaders have reached a historic agreement on climate change at the latest UN summit. The groundbreaking deal includes ambitious targets for reducing global emissions and establishes a new framework for international cooperation. This marks a significant step forward in the global fight against climate change, with nations committing to specific actionable goals.'
    },
    'dailymailvideo1': {
      title: 'Exclusive: Inside the Royal Family\'s New Initiative',
      text: 'The Royal Family has launched a groundbreaking environmental campaign, setting new standards for sustainable living. This exclusive report takes you behind the scenes of their latest green initiative, showing how the monarchy is adapting to modern environmental challenges.'
    },
    'dailymailvideo2': {
      title: 'Celebrity Charity Event Raises Millions',
      text: 'Hollywood\'s biggest stars came together for an unprecedented charity gala, raising millions for global education initiatives. The star-studded event featured exclusive performances and surprise announcements that will impact communities worldwide.'
    },
    'dylanpagevideo1': {
      title: 'Behind the Scenes: A Day in Tech Valley',
      text: 'Join me as I explore the latest innovations in Silicon Valley. From cutting-edge startups to tech giants, we\'re getting an exclusive look at what\'s shaping our digital future. The energy here is incredible, and the innovations we\'re seeing are going to change the way we live and work.'
    },
    'dylanpagevideo2': {
      title: 'The Future of Electric Vehicles: What\'s Next?',
      text: 'Taking a deep dive into the revolutionary changes happening in the electric vehicle industry. From new battery technology to autonomous driving features, we\'re exploring how these innovations are reshaping transportation for the next generation.'
    }
  };

  return contentTemplates[filename] || {
    title: 'Latest Update',
    text: 'Stay tuned for more exciting content and updates.'
  };
};

function VideoPost({ video, isActive, isCommentsOpen, onCommentsOpenChange, isArticleOpen, onArticleOpenChange }: VideoPostProps) {
  const videoRef = useRef<HTMLVideoElement>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isLiked, setIsLiked] = useState(false);
  const [isCaptionsExpanded, setIsCaptionsExpanded] = useState(false);
  const [floatingHearts, setFloatingHearts] = useState<Array<{ id: number; x: number; y: number; rotation: number }>>([]);
  const { ref, inView } = useInView({
    threshold: 0.7,
  });

  // Reset states when video changes or becomes inactive
  useEffect(() => {
    setIsLiked(false);
    setIsCaptionsExpanded(false);
    setFloatingHearts([]);
  }, [video.id, isActive]);

  // Generate content based on video file
  const videoContent = generateVideoContent(video?.videoFile);

  // Early return if video data is invalid
  if (!video || !video.videoFile) {
    return (
      <div ref={ref} className="relative h-[700px] w-full snap-start bg-black flex items-center justify-center">
        <div className="text-white text-center p-4">
          <p className="text-xl font-bold mb-2">Video Unavailable</p>
          <p className="text-sm opacity-80">This content could not be loaded.</p>
        </div>
      </div>
    );
  }

  useEffect(() => {
    if (!videoRef.current) return;
    
    const videoElement = videoRef.current;

    if (isActive && inView) {
      const playPromise = videoElement.play();
      if (playPromise !== undefined) {
        playPromise
          .then(() => setIsPlaying(true))
          .catch(() => setIsPlaying(false));
      }
    } else {
      videoElement.pause();
      setIsPlaying(false);
    }
  }, [isActive, inView]);

  const togglePlay = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    const video = videoRef.current;
    if (!video) return;

    if (video.paused) {
      const playPromise = video.play();
      if (playPromise !== undefined) {
        playPromise
          .then(() => setIsPlaying(true))
          .catch(() => setIsPlaying(false));
      }
    } else {
      video.pause();
      setIsPlaying(false);
    }
  };

  const handleDoubleClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    
    // Get click position relative to the video container
    const rect = e.currentTarget.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    // Create 5 hearts with random rotations
    const newHearts = Array.from({ length: 5 }, (_, i) => ({
      id: Date.now() + i,
      x,
      y,
      rotation: Math.random() * 60 - 30, // Random rotation between -30 and 30 degrees
    }));
    
    // Add new hearts to the state
    setFloatingHearts(prev => [...prev, ...newHearts]);
    
    // Like the video if not already liked
    if (!isLiked) {
      setIsLiked(true);
    }
    
    // Remove hearts after animation completes
    setTimeout(() => {
      setFloatingHearts(prev => prev.filter(heart => !newHearts.some(newHeart => newHeart.id === heart.id)));
    }, 2000);
  };

  return (
    <div 
      ref={ref} 
      className="relative w-full h-full snap-start bg-black"
      onDoubleClick={handleDoubleClick}
    >
      {/* Video Layer */}
      <div className="absolute inset-0">
        <div
          className="absolute inset-0"
          onClick={(e) => {
            const target = e.target as HTMLElement;
            // Don't toggle video if clicking on interactive elements or their children
            if (
              target.closest('a') ||
              target.closest('button') ||
              target.closest('.interactive-element')
            ) {
              return;
            }
            togglePlay(e);
          }}
        >
          <video
            ref={videoRef}
            src={video.videoFile}
            loop
            playsInline
            className="absolute inset-0 w-full h-full object-contain bg-black pointer-events-none"
          />
        </div>
        {/* Bottom Gradient Overlay */}
        <div 
          className={`absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent transition-all duration-500 ease-in-out ${
            isCaptionsExpanded ? 'h-[300px]' : 'h-[200px]'
          }`}
        />
      </div>
      
      {/* Floating Hearts Animation */}
      {floatingHearts.map(heart => (
        <div
          key={heart.id}
          className="absolute pointer-events-none z-30"
          style={{
            left: `${heart.x}px`,
            top: `${heart.y}px`,
            transform: `translate(-50%, 0%) rotate(${heart.rotation}deg)`,
            animation: 'float-up 2s ease-out forwards',
          }}
        >
          <Heart className="text-[#29ABE2] fill-[#29ABE2] opacity-70" size={80} />
        </div>
      ))}
      
      {/* Video Info Overlay */}
      <div className="absolute inset-0 z-20">
        {/* Captions Section */}
        <div className="absolute bottom-[112px] left-0 right-[50px] p-4 text-white">
          <h2 className="text-xl font-bold mb-3 -mr-[50px]">{videoContent.title}</h2>
          <div className="relative">
            <div className={`overflow-hidden transition-all duration-500 ease-in-out ${
              isCaptionsExpanded ? 'h-auto' : 'h-[48px]'
            }`}>
              <p className="text-xs leading-relaxed">
                {videoContent.text}
              </p>
            </div>
            {videoContent.text.length > 150 && (
              <div className="relative mt-1 bg-transparent">
                <button 
                  onClick={(e) => {
                    e.stopPropagation();
                    setIsCaptionsExpanded(!isCaptionsExpanded);
                  }}
                  className="text-blue-400 text-xs font-medium hover:text-blue-300 transition-all duration-500 ease-in-out"
                >
                  {isCaptionsExpanded ? 'Show less' : 'Read more'}
                </button>
              </div>
            )}
          </div>
        </div>

        <div className="absolute bottom-[70px] left-0 right-0 p-2.5 text-white">
          <div className="flex items-center justify-between interactive-element">
            <div className="flex items-center gap-2">
              <Link
                href={`/@${video.creator.name.toLowerCase().replace(/\s+/g, '')}`}
                className="hover:opacity-90 transition-opacity z-30"
                onClick={(e) => {
                  e.stopPropagation();
                  localStorage.setItem('lastVideoId', video.id);
                }}
              >
              <img
                src={video.creator.avatar || '/default-avatar.png'}
                alt={video.creator.name}
                className="w-10 h-10 rounded-full border border-white/20"
              />
              </Link>
              <Link
                href={`/@${video.creator.name.toLowerCase().replace(/\s+/g, '')}`}
                className="hover:opacity-90 transition-opacity z-30 block"
                onClick={(e) => {
                  e.stopPropagation();
                  localStorage.setItem('lastVideoId', video.id);
                }}
              >
              <div>
                  <h3 className="font-semibold text-sm leading-tight hover:text-blue-400 transition-colors">{video.creator.name}</h3>
                  <h4 className="text-white/70 text-[10px] leading-tight hover:text-blue-400 transition-colors">@{video.creator.name.toLowerCase().replace(/\s+/g, '')}</h4>
              </div>
              </Link>
              <button 
                onClick={(e) => {
                  e.stopPropagation();
                  e.preventDefault();
                }}
                className="pointer-events-auto px-3 py-1 bg-blue-500 text-white text-xs font-medium rounded-full hover:bg-blue-600 transition-colors"
              >
                Subscribe
              </button>
            </div>
            <button 
              onClick={(e) => {
                e.stopPropagation();
                e.preventDefault();
                onArticleOpenChange(true);
              }}
              className="pointer-events-auto px-3 py-1 bg-blue-500 text-white text-xs font-medium rounded-full hover:bg-blue-600 transition-colors"
            >
              Full Article
            </button>
          </div>
        </div>

        {/* Engagement Buttons */}
        <div className="absolute bottom-[160px] right-4 flex flex-col space-y-4 pointer-events-auto">
          <div className="flex flex-col items-center">
            <button 
              onClick={(e) => {
                e.stopPropagation();
                e.preventDefault();
                setIsLiked(!isLiked);
              }}
              className="w-10 h-10 flex items-center justify-center text-white hover:opacity-80 transition-opacity"
            >
              {isLiked ? 
                <Heart className="text-[#29ABE2] fill-[#29ABE2] transform scale-125 transition-transform duration-300" size={24} /> : 
                <Heart className="text-white fill-white transition-transform duration-300" size={24} />
              }
            </button>
            <span className="text-white text-xs mt-1">{isLiked ? video.likes + 1 : video.likes}</span>
          </div>
          <div className="flex flex-col items-center">
            <button 
              onClick={(e) => {
                e.stopPropagation();
                e.preventDefault();
                onCommentsOpenChange(!isCommentsOpen);
              }}
              className="w-10 h-10 flex items-center justify-center text-white hover:opacity-80 transition-opacity"
            >
              <MessageCircle size={24} />
            </button>
            <span className="text-white text-xs mt-1">{video.comments}</span>
          </div>
          <div className="flex flex-col items-center">
            <button 
              onClick={(e) => {
                e.stopPropagation();
                e.preventDefault();
              }}
              className="w-10 h-10 flex items-center justify-center text-white hover:opacity-80 transition-opacity"
            >
              <Share2 size={24} />
            </button>
            <span className="text-white text-xs mt-1">Share</span>
          </div>
        </div>

        {/* Play/Pause Indicator */}
        {!isPlaying && (
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="w-12 h-12 flex items-center justify-center rounded-full bg-black/40 text-white">
              <Play size={24} />
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default function VideoFeed() {
  const [activeVideoIndex, setActiveVideoIndex] = useState(0);
  const [touchStart, setTouchStart] = useState<number | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [dragOffset, setDragOffset] = useState(0);
  const [hasOpenComments, setHasOpenComments] = useState(false);
  const [hasOpenArticle, setHasOpenArticle] = useState(false);
  const [videos, setVideos] = useState<Video[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const pathname = usePathname();
  const router = useRouter();
  const searchParams = useSearchParams();
  const feedRef = useRef<HTMLDivElement>(null);
  const [currentVideoIndex, setCurrentVideoIndex] = useState(0);
  const [initialTouchX, setInitialTouchX] = useState<number | null>(null);
  const [activeEdge, setActiveEdge] = useState<'left' | 'right' | null>(null);
  
  // Define categories in the same order as TopNav
  const categories = ['Breaking', 'Politics', 'For You', 'Tech', 'Business', 'Following'];
  
  // Determine current category based on pathname
  const currentCategory = pathname === '/' || pathname === '/foryou' ? 'For You' : 
    pathname.slice(1).charAt(0).toUpperCase() + pathname.slice(2);

  useEffect(() => {
    // Instead of fetching from server, use sample videos
    setIsLoading(true);
    setError(null);
    
    try {
      // Get videos for current category
      const categoryVideos = sampleVideos[currentCategory] || [];
      setVideos(categoryVideos);
    } catch (err: any) {
      setError('Failed to load videos');
      console.error('Error loading videos:', err);
    } finally {
      setIsLoading(false);
    }
  }, [currentCategory]);

  // Add debug log for videos state changes
  useEffect(() => {
    console.log('Videos state updated:', videos);
  }, [videos]);

  // Add debug log for loading state changes
  useEffect(() => {
    console.log('Loading state:', isLoading);
  }, [isLoading]);

  useEffect(() => {
    const videoId = searchParams.get('v');
    if (videoId) {
      const videoIndex = videos.findIndex(v => v.id === videoId);
      if (videoIndex !== -1) {
        setCurrentVideoIndex(videoIndex);
        const videoElement = document.getElementById(`video-${videoId}`);
        if (videoElement) {
          videoElement.scrollIntoView({ behavior: 'smooth' });
        }
      }
    }
  }, [searchParams, videos]);

  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {
    if (hasOpenComments || hasOpenArticle) return; // Prevent scrolling when comments or article are open
    const element = e.currentTarget;
    const newIndex = Math.round(element.scrollTop / element.clientHeight);
    if (newIndex !== activeVideoIndex) {
      setActiveVideoIndex(newIndex);
    }
  };

  const handleCategoryChange = (newIndex: number) => {
    if (hasOpenComments || hasOpenArticle) return; // Prevent category change if comments or article are open
    
    const currentIndex = categories.indexOf(currentCategory);
    
    if (newIndex !== currentIndex) {
      const newCategory = categories[newIndex];
      // Special handling for For You page
      if (newCategory === 'For You') {
        router.push('/foryou');
      } else {
        router.push(`/${newCategory.toLowerCase()}`);
      }
    }
  };

  const handleLeftEdgeTouchStart = (e: React.TouchEvent) => {
    if (hasOpenComments || hasOpenArticle) return;
    
    e.preventDefault();
    const touchX = e.touches[0].clientX;
    setInitialTouchX(touchX);
    setTouchStart(touchX);
    setIsDragging(true);
    setActiveEdge('left');
  };

  const handleRightEdgeTouchStart = (e: React.TouchEvent) => {
    if (hasOpenComments || hasOpenArticle) return;
    
    e.preventDefault();
    const touchX = e.touches[0].clientX;
    setInitialTouchX(touchX);
    setTouchStart(touchX);
    setIsDragging(true);
    setActiveEdge('right');
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    if (!isDragging || !initialTouchX || !activeEdge || hasOpenComments || hasOpenArticle) return;
    
    e.preventDefault();
    const currentX = e.touches[0].clientX;
    setDragOffset(currentX - initialTouchX);
  };

  const handleTouchEnd = () => {
    if (!isDragging || !initialTouchX || !activeEdge || hasOpenComments || hasOpenArticle) return;

    const threshold = 20;
    const currentIndex = categories.indexOf(currentCategory);
    let newIndex = currentIndex;

    if (Math.abs(dragOffset) > threshold) {
      if (dragOffset > 0 && currentIndex > 0) {
        newIndex = currentIndex - 1;
      } else if (dragOffset < 0 && currentIndex < categories.length - 1) {
        newIndex = currentIndex + 1;
      }
    }

    handleCategoryChange(newIndex);

    setIsDragging(false);
    setDragOffset(0);
    setTouchStart(null);
    setInitialTouchX(null);
    setActiveEdge(null);
  };

  const handleLeftEdgeMouseDown = (e: React.MouseEvent) => {
    if (hasOpenComments || hasOpenArticle) return;
    
    e.preventDefault();
    const mouseX = e.clientX;
    setInitialTouchX(mouseX);
    setTouchStart(mouseX);
    setIsDragging(true);
    setActiveEdge('left');
  };

  const handleRightEdgeMouseDown = (e: React.MouseEvent) => {
    if (hasOpenComments || hasOpenArticle) return;
    
    e.preventDefault();
    const mouseX = e.clientX;
    setInitialTouchX(mouseX);
    setTouchStart(mouseX);
    setIsDragging(true);
    setActiveEdge('right');
  };

  const handleMouseMove = (e: React.MouseEvent) => {
    if (!isDragging || !initialTouchX || !activeEdge || hasOpenComments || hasOpenArticle) return;
    
    e.preventDefault();
    const currentX = e.clientX;
    setDragOffset(currentX - initialTouchX);
  };

  const handleMouseUp = () => {
    if (!isDragging || !initialTouchX || !activeEdge || hasOpenComments || hasOpenArticle) return;

    const threshold = 20;
    const currentIndex = categories.indexOf(currentCategory);
    let newIndex = currentIndex;

    if (Math.abs(dragOffset) > threshold) {
      if (dragOffset > 0 && currentIndex > 0) {
        newIndex = currentIndex - 1;
      } else if (dragOffset < 0 && currentIndex < categories.length - 1) {
        newIndex = currentIndex + 1;
      }
    }

    handleCategoryChange(newIndex);

    setIsDragging(false);
    setDragOffset(0);
    setTouchStart(null);
    setInitialTouchX(null);
    setActiveEdge(null);
  };

  if (isLoading) {
    return (
      <div className="relative h-full flex items-center justify-center bg-black">
        <div className="text-white text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-white mx-auto mb-4"></div>
          <p>Loading videos...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="relative h-full flex items-center justify-center bg-black">
        <div className="text-white text-center p-4">
          <p className="text-red-500 mb-2">‚ö†Ô∏è Error loading videos</p>
          <p className="text-sm opacity-80">{error}</p>
          <button 
            onClick={() => window.location.reload()} 
            className="mt-4 px-4 py-2 bg-blue-500 rounded-full hover:bg-blue-600 transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="relative h-full">
      <style jsx global>{`
        @keyframes float-up {
          0% {
            transform: translate(-50%, 0%) scale(0.5) rotate(var(--rotation));
            opacity: 0.7;
          }
          100% {
            transform: translate(-50%, -100%) scale(1.5) rotate(var(--rotation));
            opacity: 0;
          }
        }
      `}</style>
      <TopNav />
      
      {/* Left Edge Swipe Area */}
      <div 
        className="absolute left-0 top-0 bottom-0 w-[15%] z-30"
        onTouchStart={handleLeftEdgeTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
        onMouseDown={handleLeftEdgeMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={handleMouseUp}
      >
        <div className={`w-full h-full bg-gradient-to-r from-black/30 to-transparent transition-opacity duration-300 ${isDragging && activeEdge === 'left' ? 'opacity-100' : 'opacity-50'}`} />
      </div>
      
      {/* Right Edge Swipe Area */}
      <div 
        className="absolute right-0 top-0 bottom-0 w-[15%] z-30"
        onTouchStart={handleRightEdgeTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
        onMouseDown={handleRightEdgeMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={handleMouseUp}
      >
        <div className={`w-full h-full bg-gradient-to-l from-black/30 to-transparent transition-opacity duration-300 ${isDragging && activeEdge === 'right' ? 'opacity-100' : 'opacity-50'}`} />
      </div>
      
      {/* Category Change Indicator */}
      {isDragging && (
        <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-40 pointer-events-none">
          <div className={`text-white text-2xl font-bold transition-opacity duration-300 ${Math.abs(dragOffset) > 10 ? 'opacity-100' : 'opacity-0'}`}>
            {dragOffset > 0 ? '‚Üê' : '‚Üí'}
          </div>
        </div>
      )}
      
      {/* Video Feed */}
      <div 
        ref={feedRef}
        className="absolute inset-0 overflow-y-scroll snap-y snap-mandatory scrollbar-hide"
        onScroll={handleScroll}
        style={{
          transform: isDragging ? `translateX(${dragOffset}px)` : 'none',
          transition: isDragging ? 'none' : 'transform 0.3s ease-out',
          cursor: isDragging ? 'grabbing' : 'default',
          pointerEvents: hasOpenComments || hasOpenArticle ? 'none' : 'auto'
        }}
      >
        {videos.length === 0 ? (
          <div className="h-full flex items-center justify-center bg-black text-white text-center p-4">
            <p>No videos available for this category</p>
          </div>
        ) : (
          videos.map((video, index) => (
            <div
              key={video.id}
              id={`video-${video.id}`}
              className={`relative w-full h-screen snap-start ${
                index === currentVideoIndex ? 'z-10' : 'z-0'
              }`}
            >
          <VideoPost
            video={video}
            isActive={index === activeVideoIndex}
            isCommentsOpen={hasOpenComments}
            onCommentsOpenChange={setHasOpenComments}
            isArticleOpen={hasOpenArticle}
            onArticleOpenChange={setHasOpenArticle}
          />
            </div>
          ))
        )}
      </div>

      {/* Bottom Navigation */}
      <div className="fixed bottom-0 left-0 right-0 z-50" style={{ pointerEvents: hasOpenComments || hasOpenArticle ? 'none' : 'auto' }}>
        <BottomNav />
      </div>

      {/* Comments Component */}
      {videos[activeVideoIndex] && (
        <Comments 
          isOpen={hasOpenComments}
          onClose={() => setHasOpenComments(false)}
          comments={sampleComments[videos[activeVideoIndex].id] || []}
        />
      )}

      {/* Article Popup */}
      {videos[activeVideoIndex] && (
        <ArticlePopup 
          isOpen={hasOpenArticle}
          onClose={() => setHasOpenArticle(false)}
          title={generateVideoContent(videos[activeVideoIndex].videoFile).title}
          content={generateVideoContent(videos[activeVideoIndex].videoFile).text}
        />
      )}
    </div>
  );
} 